server:
  port: 8184

logging:
  level:
    com.backend.programming.learning.system: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

eureka:
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: ${EUREKA_SERVER:http://localhost:8761/eureka}
  instance:
    preferIpAddress: true

socket-config:
  port: 8085
  host: 172.16.12.5

course-service:
  question-request-topic-name: core-question-request
  question-response-topic-name: core-question-response

  gemini-api-key: AIzaSyCzF7o3Z3RTO8Bqo6s18Yj18WyFeqZrvVM
  gemini-api-url: https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=%s

  auth-service-user-request-to-course-service-topic-name: auth-service-user-request-to-course-service
  course-service-user-request-to-auth-service-topic-name: course-service-user-request-to-auth-service
  any-services-user-response-to-auth-service-topic-name: any-services-user-response-to-auth-service
  auth-service-user-response-to-course-service-topic-name: auth-service-user-response-to-course-service

  course-organization-request-topic-name: course-organization-request
  organization-response-topic-name: organization-response

  calendar-event-update-request-topic-name: calendar-event-update-request
  calendar-event-update-response-topic-name: calendar-event-update-response

  code-submission-sender-request-topic-name: code-submission-sender-request

  code-question-update-request-to-core-service-topic-name: code-question-update-request-to-core-service
  code-submission-update-request-to-core-service-topic-name: code-submission-update-request-to-core-service

  outbox-scheduler-fixed-rate: 2000
  outbox-scheduler-initial-delay: 2000

  synchronize-scheduler-fixed-rate: 5000
  synchronize-scheduler-initial-delay: 5000

  create-notification-scheduler-fixed-rate: 1800000

spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://${keycloak.domain}/realms/${keycloak.realm}
  application:
    name: course-service
  config:
    import: optional:configserver:${CONFIG_SERVER:http://localhost:9999}
  cloud:
    config:
      username: spring_cloud_user
      password: springCloud_Pwd!
  data:
    redis:
      host: localhost
      port: 6379
      password: ""
  datasource:
    url: jdbc:postgresql://localhost:5432/course-service?currentSchema=public&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified
    username: postgres
    password: localdb
    driver-class-name: org.postgresql.Driver

  sql:
    init:
      platform: postgres
      mode: always
      data-locations: classpath:init-data.sql
      schema-locations: classpath:init-schema.sql

kafka-config:
  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081
  num-of-partitions: 3
  replication-factor: 3

kafka-producer-config:
  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
  compression-type: none
  acks: all
  batch-size: 16384
  batch-size-boost-factor: 100
  linger-ms: 5
  request-timeout-ms: 60000
  retry-count: 5

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  question-request-consumer-group-id: question-request-topic-consumer

  course-service-calendar-event-consumer-group-id: course-service-calendar-event-consumer

  course-service-organization-create-request-group-id: course-service-organization-create-request-consumer
  course-service-organization-update-request-group-id: course-service-organization-update-request-consumer
  course-service-organization-delete-request-group-id: course-service-organization-delete-request-consumer

  auth-service-to-course-service-user-request-group-id: auth-service-to-course-service-user-request-topic
  auth-service-to-course-service-user-response-group-id: auth-service-to-course-service-user-response-topic

  course-service-organization-request-group-id: course-service-organization-request-topic

  code-question-update-consumer-group-id: code-question-update-topic-consumer-2
  course-group-id: course-group-id

  auto-offset-reset: earliest
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  batch-listener: true
  auto-startup: true
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150

springdoc:
  api-docs:
    path: /course/v3/api-docs
  swagger-ui:
    path: /course/swagger-ui

security:
  paths-to-ignore: /course/v3/api-docs, /actuator/**

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always
    prometheus:
      cache.time-to-live: 1ms
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

log:
  appName: course-service

jwt:
  auth:
    converter:
      resource-id: realm_access
      principle-attribute: preferred_username

keycloak:
  realm: spring-boot-realm-dev
  domain: localhost:8890
  admin-client-id: admin-cli
  admin-client-secret: bTEi5t1OKE7l97ij9wYjAMqqYA4NCod8
  client: spring-client-api-rest
  client-secret: pE2Lz9RL01YGE15800wDxRfnz2KFuCgX
  urls: http://${keycloak.domain}

---
spring.config.activate.on-profile: prod
# Disable springdoc-openapi
springdoc:
  api-docs:
    enabled: false
  swagger-ui:
    enabled: false

security:
  paths-to-ignore: /actuator/**